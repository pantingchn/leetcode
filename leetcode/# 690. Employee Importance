# 基于深度优先搜索
"""
# Employee info
class Employee:
    def __init__(self, id, importance, subordinates):
        # It's the unique id of each node.
        # unique id of this employee
        self.id = id
        # the importance value of this employee
        self.importance = importance
        # the id of direct subordinates
        self.subordinates = subordinates
"""
class Solution:
    def getImportance(self, employees, id):
        """
        :type employees: Employee
        :type id: int
        :rtype: int
        """
        emap = {e.id: e for e in employees}  # emap 这里是字典，e.id是key， e是对象
        def dfs(eid):
            employee = emap[eid]
            return (employee.importance + sum(dfs(eid) for eid in employee.subordinates))
        return dfs(id)
        
        
        
        
        
# 基于广度优先搜索
# deque模块是python标准库collections中的一项，它提供了两端都可以操作的序列，这意味着，在序列的前后你都可以执行添加或删除操作。
from collections import deque

class Solution:
    def getImportance(self, employees, id):
        """
        :type employees: Employee
        :type id: int
        :rtype: int
        """
        d = {}
        
        for e in employees:
            d[e.id] = (e.importance, e.subordinates)
            
        q = deque([d[id][1]])
        res = d[id][0]
        
        while q:
            sub = q.popleft()
            for s in sub:
                if s in d:
                    res += d[s][0]
                    q.append(d[s][1])
        
        return res
