# #must import math
# import math

# class Solution(object):
#     def imageSmoother(self, M):
#         rows = len(M)        
#         cols = len(M[0])
        
#         #创造一个空的rows* cols的答案矩阵
#         result = [[0]* cols for _ in range(rows)]        
#         #在原矩阵上围上一圈-1，这样每个元素都可以被周围9个（含自己）smooth        
#         #顶上面铺上-1行
#         M.append([-1]*cols)        
#         #底下面铺上-1行
#         M.insert(0,[-1]*cols)        
#         for i in M:            
#             # 最右面铺上-1
#             i.append(-1)            
#             # 最左边铺上-1
#             i.insert(0,-1)        
#         #创造一个像素容器
#         temp = []
        
#         for i in range(1,rows+1):
            
#             for j in range(1,cols+1):
                
#                 # 添加8个方向的邻元素和自己
#                 temp.append(M[i+1][j])
#                 temp.append(M[i][j+1])
#                 temp.append(M[i-1][j])
#                 temp.append(M[i][j-1])
#                 temp.append(M[i+1][j+1])
#                 temp.append(M[i][j])
#                 temp.append(M[i+1][j-1])
#                 temp.append(M[i-1][j+1])
#                 temp.append(M[i-1][j-1])
                
#                 # 算出smooth值
#                 nums = [x for x in temp if x> -1]
#                 smooth = math.floor(sum(nums)/len(nums))
                
#                 # 给result矩阵加载该smooth值，注意一定要行，列都-1，因为M已经大了一圈
#                 result[i-1][j-1] = int(smooth)
                
#                 # 清空像素容器
#                 temp = []
                
#         return result




from copy import deepcopy

class Solution(object):
    def imageSmoother(self, M):
        """
        :type M: List[List[int]]
        :rtype: List[List[int]]
        """
        x_len = len(M)
        y_len = len(M[0]) if x_len else 0
        res = deepcopy(M)
        for x in range(x_len):
            for y in range(y_len):
                neighbors = [
                    M[_x][_y]
                    for _x in (x-1, x, x+1)
                    for _y in (y-1, y, y+1)
                    if 0 <= _x < x_len and 0 <= _y < y_len
                ]
                res[x][y] = sum(neighbors) // len(neighbors)
        return res
